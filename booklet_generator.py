from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle, HRFlowable
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT
import re
from datetime import datetime
from io import BytesIO
import streamlit as st

class BookletGenerator:
    """Generates comprehensive PDF booklets with improved formatting"""
    
    def __init__(self, title, author="RAG System"):
        self.title = title
        self.author = author
        self.styles = getSampleStyleSheet()
        self.story = []
        
        # Enhanced custom styles for better formatting
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Title'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.darkblue,
            fontName='Helvetica-Bold'
        )
        
        self.heading_style = ParagraphStyle(
            'CustomHeading',
            parent=self.styles['Heading1'],
            fontSize=16,
            spaceAfter=18,
            spaceBefore=20,
            textColor=colors.darkblue,
            fontName='Helvetica-Bold'
        )
        
        self.subheading_style = ParagraphStyle(
            'CustomSubHeading',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            spaceBefore=16,
            textColor=colors.darkgreen,
            fontName='Helvetica-Bold'
        )
        
        self.body_style = ParagraphStyle(
            'CustomBody',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=12,
            alignment=TA_JUSTIFY,
            leftIndent=0,
            rightIndent=0,
            fontName='Helvetica'
        )
        
        self.bullet_style = ParagraphStyle(
            'CustomBullet',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=8,
            leftIndent=20,
            bulletIndent=10,
            fontName='Helvetica'
        )
        
        self.citation_style = ParagraphStyle(
            'CustomCitation',
            parent=self.styles['Normal'],
            fontSize=10,
            spaceAfter=10,
            leftIndent=15,
            fontName='Helvetica',
            textColor=colors.darkgrey
        )
    
    def add_title_page(self):
        """Add enhanced title page"""
        self.story.append(Spacer(1, 2*inch))
        self.story.append(Paragraph(self.title, self.title_style))
        self.story.append(Spacer(1, 0.5*inch))
        
        # Add a horizontal line
        self.story.append(HRFlowable(width="80%", thickness=2, color=colors.darkblue))
        self.story.append(Spacer(1, 0.3*inch))
        
        author_style = ParagraphStyle(
            'AuthorStyle',
            parent=self.styles['Normal'],
            fontSize=12,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        )
        
        self.story.append(Paragraph(f"Generated by: {self.author}", author_style))
        self.story.append(Paragraph(f"Generated on: {datetime.now().strftime('%B %d, %Y')}", author_style))
        self.story.append(PageBreak())
    
    def format_text_with_structure(self, content):
        """Format text content with proper paragraph structure and bullet points"""
        # Split content into sections and format appropriately
        sections = re.split(r'\n\s*\n', content)
        formatted_sections = []
        
        for section in sections:
            section = section.strip()
            if not section:
                continue
                
            # Check if section looks like a heading (short, ends with colon, all caps, etc.)
            if (len(section) < 100 and 
                (section.endswith(':') or section.isupper() or 
                 any(marker in section.lower() for marker in ['objective', 'methodology', 'results', 'conclusion', 'introduction']))):
                formatted_sections.append(Paragraph(section, self.subheading_style))
            else:
                # Check for bullet points or numbered lists
                lines = section.split('\n')
                has_bullets = any(line.strip().startswith(('-', '•', '*', '1.', '2.', '3.')) for line in lines)
                
                if has_bullets:
                    for line in lines:
                        line = line.strip()
                        if line:
                            if line.startswith(('-', '•', '*')):
                                # Remove bullet and format as bullet point
                                line = line[1:].strip()
                                formatted_sections.append(Paragraph(f"• {line}", self.bullet_style))
                            elif re.match(r'^\d+\.', line):
                                # Numbered list
                                formatted_sections.append(Paragraph(line, self.bullet_style))
                            else:
                                formatted_sections.append(Paragraph(line, self.body_style))
                else:
                    # Regular paragraph
                    formatted_sections.append(Paragraph(section, self.body_style))
            
            formatted_sections.append(Spacer(1, 6))
        
        return formatted_sections
    
    def add_section(self, title, content):
        """Add a section with enhanced formatting"""
        self.story.append(Paragraph(title, self.heading_style))
        
        # Format content with proper structure
        formatted_content = self.format_text_with_structure(content)
        self.story.extend(formatted_content)
        
        self.story.append(Spacer(1, 20))
    
    def add_image(self, img_buffer, caption="", width=6*inch):
        """Add image to booklet with better formatting"""
        if img_buffer:
            try:
                img_buffer.seek(0)
                img = Image(img_buffer, width=width, height=width*0.6)
                self.story.append(Spacer(1, 10))
                self.story.append(img)
                if caption:
                    caption_style = ParagraphStyle(
                        'CaptionStyle',
                        parent=self.styles['Normal'],
                        fontSize=10,
                        alignment=TA_CENTER,
                        fontName='Helvetica-Oblique',
                        textColor=colors.darkgrey,
                        spaceBefore=5,
                        spaceAfter=15
                    )
                    self.story.append(Paragraph(f"Figure: {caption}", caption_style))
                self.story.append(Spacer(1, 15))
            except Exception as e:
                st.warning(f"Could not add image to booklet: {str(e)}")
    
    def add_citations(self, citations):
        """Add citations section with clickable links"""
        if citations:
            self.story.append(Paragraph("References and Related Research", self.heading_style))
            self.story.append(Spacer(1, 10))
            
            for i, citation in enumerate(citations, 1):
                authors_text = ', '.join(citation['authors']) if citation['authors'] else 'Unknown Authors'
                
                # Create citation text with proper formatting
                citation_parts = [
                    f"<b>[{i}] {citation['title']}</b>",
                    f"<i>Authors:</i> {authors_text}",
                    f"<i>Journal:</i> {citation['journal']}",
                    f"<i>Year:</i> {citation['year']}"
                ]
                
                # Add DOI link if available
                if citation['doi'] != 'No DOI' and citation.get('url'):
                    citation_parts.append(f"<i>DOI:</i> <link href='{citation['url']}'>{citation['doi']}</link>")
                elif citation['doi'] != 'No DOI':
                    citation_parts.append(f"<i>DOI:</i> {citation['doi']}")
                
                citation_text = "<br/>".join(citation_parts)
                self.story.append(Paragraph(citation_text, self.citation_style))
                self.story.append(Spacer(1, 12))
            
            self.story.append(Spacer(1, 20))
    
    def generate_pdf(self):
        """Generate the final PDF with enhanced formatting"""
        try:
            buffer = BytesIO()
            doc = SimpleDocTemplate(
                buffer, 
                pagesize=A4, 
                rightMargin=72, 
                leftMargin=72,
                topMargin=72, 
                bottomMargin=72
            )
            doc.build(self.story)
            buffer.seek(0)
            return buffer
        except Exception as e:
            st.error(f"Could not generate PDF: {str(e)}")
            return None